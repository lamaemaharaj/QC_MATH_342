{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lab 1 - Python Lab\n",
    "## Author: *Lamae Maharaj*\n",
    "## Date: 11:59 PM February 13, 2022\n",
    "\n",
    "You should have access to a Notebook software that can edit and run `.ipynb` files. Prefereably, I recommend using Jupyter Notebook through the [Anaconda package](https://docs.anaconda.com/anaconda/install/index.html). You will write code in places marked \"TO-DO\" to complete the problems. Most of this will be a pure programming assignment but there are some questions that instead ask you to \"write a few sentences\". This is a writing class afterall. The tools for the solutions to these probelms can be found in the class python practice lectures. I encourage you to use Google and to flex your Google-Fu skills, but you should be learning. If you copy and paste esoteric code you don't understand, you're only cheating youself.\n",
    "\n",
    "To \"hand in\" this lab, you should first download this file. The best way to do this is by cloning the class repository, solving it on your local device, then copying this file into your personal class repository on Github. For the student's convenience I will upload the Python Labs and Practice Lectures onto the Slack channel. \n",
    "\n",
    "Work on this with your friends! Programming is often a collaborative effort.\n",
    "\n",
    "### Basic Python Skills\n",
    "\n",
    "1. Print out the numerical constant pi with ten digits after the decimal point using the internal constant `pi`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Some packages I used. \n",
    "import numpy as np\n",
    "import math as mth\n",
    "import pandas as pd\n",
    "import random as rn\n",
    "from scipy.stats import percentileofscore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.1415926536"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "float(format(np.pi,\".10f\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Sum up the first 103 terms of the series 1 + 1/2 + 1/4 + 1/8 + ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "sum([1/(2 ** i) for i in range(0, 103 + 1)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Find the product of the first 37 terms in the sequence 1/3, 1/6, 1/9  ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TO-DO\n",
    "np.prod(1/np.arange(3,112,3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Find the product of the first 387 terms of `1 * 1/2 * 1/4 * 1/8 *` ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "np.prod(1/np.arange(2,776,2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Is this answer *exactly* correct? \n",
    "\n",
    "No, it is not exactly correct. This computation experienced a numerical underflow. \n",
    "\n",
    "6. Figure out a means to express the answer more exactly. Not compute exactly, but express more exactly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-5253.69314718056"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "-np.log(2)-sum(range(0,103))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7. Create the sequence `x = [Inf, 20, 18, ..., -20]`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ inf,  20.,  18.,  16.,  14.,  12.,  10.,   8.,   6.,   4.,   2.,\n",
       "         0.,  -2.,  -4.,  -6.,  -8., -10., -12., -14., -16., -18., -20.])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "x = np.arange(-20,24,2,dtype=float)\n",
    "x = np.flip(x)\n",
    "x[0] = np.inf\n",
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8. Create the sequence `x = [log_3(Inf), log_3(100), log_3(98), ... log_3(-20)]`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/xw/c8nf8wyj3lg6zyzwz8lc32xr0000gn/T/ipykernel_64383/2258577920.py:5: RuntimeWarning: divide by zero encountered in log\n",
      "  x = np.log(x)\n",
      "/var/folders/xw/c8nf8wyj3lg6zyzwz8lc32xr0000gn/T/ipykernel_64383/2258577920.py:5: RuntimeWarning: invalid value encountered in log\n",
      "  x = np.log(x)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([       inf, 4.60517019, 4.58496748, 4.56434819, 4.54329478,\n",
       "       4.52178858, 4.49980967, 4.47733681, 4.4543473 , 4.4308168 ,\n",
       "       4.40671925, 4.38202663, 4.35670883, 4.33073334, 4.30406509,\n",
       "       4.27666612, 4.24849524, 4.21950771, 4.18965474, 4.15888308,\n",
       "       4.12713439, 4.09434456, 4.06044301, 4.02535169, 3.98898405,\n",
       "       3.95124372, 3.91202301, 3.87120101, 3.8286414 , 3.78418963,\n",
       "       3.73766962, 3.68887945, 3.63758616, 3.58351894, 3.52636052,\n",
       "       3.4657359 , 3.40119738, 3.33220451, 3.25809654, 3.17805383,\n",
       "       3.09104245, 2.99573227, 2.89037176, 2.77258872, 2.63905733,\n",
       "       2.48490665, 2.30258509, 2.07944154, 1.79175947, 1.38629436,\n",
       "       0.69314718,       -inf,        nan,        nan,        nan,\n",
       "              nan,        nan,        nan,        nan,        nan,\n",
       "              nan,        nan])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "x = np.arange(-20,104,2,dtype=float)\n",
    "x = np.flip(x)\n",
    "x[0] = np.inf\n",
    "x = np.log(x)\n",
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9. Comment on the appropriateness of the non-numeric values.\n",
    "\n",
    "NAN occurs because you cannot take the log of a negative number.\n",
    "-Inf occurs when you take the log of 0.\n",
    "\n",
    "10. Create a vector of booleans where the entry is true if `x[i]` is positive and finite."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True, False, False, False,\n",
       "       False, False, False, False, False, False, False, False])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "y = np.array([i>0 and np.isfinite(i) for i in x])\n",
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "11. Locate the indices of the non-real numbers in this vector. Hint: use the `help` function. Don't hesitate to use the documentation via `help()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61]),)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "np.where(y==np.iscomplex(y))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "12. Locate the indices of the infinite quantities in this vector. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is where negative infinity exists: (array([51]),)\n",
      "This is where positive infinity exists: (array([0]),)\n"
     ]
    }
   ],
   "source": [
    "# TO-DO\n",
    "print(\"This is where negative infinity exists:\",np.where(x==-np.inf))\n",
    "print(\"This is where positive infinity exists:\",np.where(x==np.inf))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "13. Locate the indices of the min and max in this vector."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The maximum value is: inf\n",
      "The minimym value is: -inf\n"
     ]
    }
   ],
   "source": [
    "# TO-DO\n",
    "print(\"The maximum value is:\", max(x))\n",
    "print(\"The minimym value is:\", min(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "14. Count the number of unique values in `x`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "62"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "len(np.unique(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "15. Cast `x` to a factor. Do the number of levels make sense?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([       inf, 4.60517019, 4.58496748, 4.56434819, 4.54329478,\n",
       "       4.52178858, 4.49980967, 4.47733681, 4.4543473 , 4.4308168 ,\n",
       "       4.40671925, 4.38202663, 4.35670883, 4.33073334, 4.30406509,\n",
       "       4.27666612, 4.24849524, 4.21950771, 4.18965474, 4.15888308,\n",
       "       4.12713439, 4.09434456, 4.06044301, 4.02535169, 3.98898405,\n",
       "       3.95124372, 3.91202301, 3.87120101, 3.8286414 , 3.78418963,\n",
       "       3.73766962, 3.68887945, 3.63758616, 3.58351894, 3.52636052,\n",
       "       3.4657359 , 3.40119738, 3.33220451, 3.25809654, 3.17805383,\n",
       "       3.09104245, 2.99573227, 2.89037176, 2.77258872, 2.63905733,\n",
       "       2.48490665, 2.30258509, 2.07944154, 1.79175947, 1.38629436,\n",
       "       0.69314718,       -inf,        nan,        nan,        nan,\n",
       "              nan,        nan,        nan,        nan,        nan,\n",
       "              nan,        nan])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "x = pd.to_numeric(x)\n",
    "x "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "16. Cast `x` to integers. What do we learn about R's infinity representation in the integer data type?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-9223372036854775808,                    4,                    4,\n",
       "                          4,                    4,                    4,\n",
       "                          4,                    4,                    4,\n",
       "                          4,                    4,                    4,\n",
       "                          4,                    4,                    4,\n",
       "                          4,                    4,                    4,\n",
       "                          4,                    4,                    4,\n",
       "                          4,                    4,                    4,\n",
       "                          3,                    3,                    3,\n",
       "                          3,                    3,                    3,\n",
       "                          3,                    3,                    3,\n",
       "                          3,                    3,                    3,\n",
       "                          3,                    3,                    3,\n",
       "                          3,                    3,                    2,\n",
       "                          2,                    2,                    2,\n",
       "                          2,                    2,                    2,\n",
       "                          1,                    1,                    0,\n",
       "       -9223372036854775808, -9223372036854775808, -9223372036854775808,\n",
       "       -9223372036854775808, -9223372036854775808, -9223372036854775808,\n",
       "       -9223372036854775808, -9223372036854775808, -9223372036854775808,\n",
       "       -9223372036854775808, -9223372036854775808])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "x.astype(int)\n",
    "\n",
    "# I learned that Python's infinity representation in the integer turns into -9223372036854775808 being its standard\n",
    "# for both -inf and inf. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "17. Use `x` to create a new vector `y` containing only the positive real numbers in x."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/xw/c8nf8wyj3lg6zyzwz8lc32xr0000gn/T/ipykernel_64383/1398241831.py:2: DeprecationWarning: `np.complex` is a deprecated alias for the builtin `complex`. To silence this warning, use `complex` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.complex128` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y = [i  for i in x if i>0 and np.complex(i)]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[inf,\n",
       " 4.605170185988092,\n",
       " 4.584967478670572,\n",
       " 4.564348191467836,\n",
       " 4.543294782270004,\n",
       " 4.5217885770490405,\n",
       " 4.499809670330265,\n",
       " 4.477336814478207,\n",
       " 4.454347296253507,\n",
       " 4.430816798843313,\n",
       " 4.406719247264253,\n",
       " 4.382026634673881,\n",
       " 4.356708826689592,\n",
       " 4.330733340286331,\n",
       " 4.30406509320417,\n",
       " 4.276666119016055,\n",
       " 4.248495242049359,\n",
       " 4.219507705176107,\n",
       " 4.189654742026425,\n",
       " 4.1588830833596715,\n",
       " 4.127134385045092,\n",
       " 4.0943445622221,\n",
       " 4.060443010546419,\n",
       " 4.02535169073515,\n",
       " 3.9889840465642745,\n",
       " 3.9512437185814275,\n",
       " 3.912023005428146,\n",
       " 3.871201010907891,\n",
       " 3.828641396489095,\n",
       " 3.784189633918261,\n",
       " 3.7376696182833684,\n",
       " 3.6888794541139363,\n",
       " 3.6375861597263857,\n",
       " 3.58351893845611,\n",
       " 3.5263605246161616,\n",
       " 3.4657359027997265,\n",
       " 3.4011973816621555,\n",
       " 3.332204510175204,\n",
       " 3.258096538021482,\n",
       " 3.1780538303479458,\n",
       " 3.091042453358316,\n",
       " 2.995732273553991,\n",
       " 2.8903717578961645,\n",
       " 2.772588722239781,\n",
       " 2.6390573296152584,\n",
       " 2.4849066497880004,\n",
       " 2.302585092994046,\n",
       " 2.0794415416798357,\n",
       " 1.791759469228055,\n",
       " 1.3862943611198906,\n",
       " 0.6931471805599453]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "y = [i  for i in x if i>0 and np.complex(i)]\n",
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "18. Use the left rectangle method to numerically integrate x^2 from 0 to 1 with rectangle width size 1e-6."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3333318333355003"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "sum(np.arange(0,1-1e-6,1e-6)**2)*1e-6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "19. Calculate the average of 100 realizations of standard Bernoullis in one line using the `random` library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.44"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "n = rn.randint(1,1)\n",
    "p = rn.uniform(0,1)\n",
    "np.mean(np.random.binomial(n, p, size=100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "20. Calculate the average of 500 realizations of Bernoullis with p = 0.9."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.912"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "np.mean(np.random.binomial(n, 0.9, size=500))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "21. Calculate the average of 1000 realizations of Bernoullis with p = 0.9."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.885"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "S = np.random.binomial(n, 0.9, size=1000)\n",
    "np.mean(S)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "23. Convert this variable into three binary variables without any information loss and put them into a data matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TO-DO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "24. What should the sum of each row be (in English)? \n",
    "\n",
    "\n",
    "\n",
    "25. Verify that. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TO-DO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "26. How should the column sum look (in English)? \n",
    "\n",
    "\n",
    "\n",
    "27. Verify that."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TO-DO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "28. Generate a Pandas DataFrame with 100 rows where:\n",
    "\n",
    "* The first column is realization from a normal with mean 17 and variance 38.\n",
    "* The second column is uniform between -10 and 10.\n",
    "* The third column is poisson with mean 6.\n",
    "* The fourth column in exponential with lambda of 9.\n",
    "* The fifth column is binomial with n = 20 and p = 0.12.\n",
    "* and the sixth column is a binary variable with exactly 24% 1's dispersed randomly.\n",
    "\n",
    "Name the rows the entries of the `fake_first_names` list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "fake_first_names = [\"Sophia\", \"Emma\", \"Olivia\", \"Ava\", \"Mia\", \"Isabella\", \"Riley\", \n",
    "  \"Aria\", \"Zoe\", \"Charlotte\", \"Lily\", \"Layla\", \"Amelia\", \"Emily\", \n",
    "  \"Madelyn\", \"Aubrey\", \"Adalyn\", \"Madison\", \"Chloe\", \"Harper\", \n",
    "  \"Abigail\", \"Aaliyah\", \"Avery\", \"Evelyn\", \"Kaylee\", \"Ella\", \"Ellie\", \n",
    "  \"Scarlett\", \"Arianna\", \"Hailey\", \"Nora\", \"Addison\", \"Brooklyn\", \n",
    "  \"Hannah\", \"Mila\", \"Leah\", \"Elizabeth\", \"Sarah\", \"Eliana\", \"Mackenzie\", \n",
    "  \"Peyton\", \"Maria\", \"Grace\", \"Adeline\", \"Elena\", \"Anna\", \"Victoria\", \n",
    "  \"Camilla\", \"Lillian\", \"Natalie\", \"Jackson\", \"Aiden\", \"Lucas\", \n",
    "  \"Liam\", \"Noah\", \"Ethan\", \"Mason\", \"Caden\", \"Oliver\", \"Elijah\", \n",
    "  \"Grayson\", \"Jacob\", \"Michael\", \"Benjamin\", \"Carter\", \"James\", \n",
    "  \"Jayden\", \"Logan\", \"Alexander\", \"Caleb\", \"Ryan\", \"Luke\", \"Daniel\", \n",
    "  \"Jack\", \"William\", \"Owen\", \"Gabriel\", \"Matthew\", \"Connor\", \"Jayce\", \n",
    "  \"Isaac\", \"Sebastian\", \"Henry\", \"Muhammad\", \"Cameron\", \"Wyatt\", \n",
    "  \"Dylan\", \"Nathan\", \"Nicholas\", \"Julian\", \"Eli\", \"Levi\", \"Isaiah\", \n",
    "  \"Landon\", \"David\", \"Christian\", \"Andrew\", \"Brayden\", \"John\", \n",
    "  \"Lincoln\"]\n",
    "\n",
    "# TO-DO\n",
    "n = 100\n",
    "col1 = np.array(np.random.normal(17,38,n))\n",
    "col2 = np.array(np.random.uniform(-10,10,n))\n",
    "col3 = np.array(np.random.poisson(6,n))\n",
    "col4 = np.array(np.random.exponential(9,n))\n",
    "col5 = np.array(np.random.binomial(20,0.12,n))\n",
    "col6 = np.random.binomial(1, 0.24, size=n)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "29. Create a data frame of the same data as above except make the binary variable a factor \"DOMESTIC\" vs \"FOREIGN\" for 0 and 1 respectively. Use RStudio's `View` function to ensure this worked as desired."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Realization</th>\n",
       "      <th>Uniform</th>\n",
       "      <th>Poisson</th>\n",
       "      <th>Exponential</th>\n",
       "      <th>Binomial</th>\n",
       "      <th>Binary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Sophia</th>\n",
       "      <td>23.177852</td>\n",
       "      <td>-7.931948</td>\n",
       "      <td>6</td>\n",
       "      <td>3.059147</td>\n",
       "      <td>4</td>\n",
       "      <td>FOREIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Emma</th>\n",
       "      <td>6.208732</td>\n",
       "      <td>2.353540</td>\n",
       "      <td>8</td>\n",
       "      <td>0.592425</td>\n",
       "      <td>2</td>\n",
       "      <td>DOMESTIC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Olivia</th>\n",
       "      <td>71.980159</td>\n",
       "      <td>7.658680</td>\n",
       "      <td>3</td>\n",
       "      <td>5.339675</td>\n",
       "      <td>4</td>\n",
       "      <td>DOMESTIC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ava</th>\n",
       "      <td>-0.440179</td>\n",
       "      <td>3.325740</td>\n",
       "      <td>3</td>\n",
       "      <td>7.605779</td>\n",
       "      <td>3</td>\n",
       "      <td>FOREIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mia</th>\n",
       "      <td>-5.703577</td>\n",
       "      <td>-3.860062</td>\n",
       "      <td>6</td>\n",
       "      <td>10.139036</td>\n",
       "      <td>3</td>\n",
       "      <td>DOMESTIC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Christian</th>\n",
       "      <td>2.879641</td>\n",
       "      <td>3.495297</td>\n",
       "      <td>7</td>\n",
       "      <td>2.750695</td>\n",
       "      <td>0</td>\n",
       "      <td>DOMESTIC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andrew</th>\n",
       "      <td>22.882727</td>\n",
       "      <td>9.833486</td>\n",
       "      <td>7</td>\n",
       "      <td>2.195155</td>\n",
       "      <td>1</td>\n",
       "      <td>DOMESTIC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brayden</th>\n",
       "      <td>23.577317</td>\n",
       "      <td>-9.007030</td>\n",
       "      <td>8</td>\n",
       "      <td>7.018624</td>\n",
       "      <td>1</td>\n",
       "      <td>FOREIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>John</th>\n",
       "      <td>-34.721386</td>\n",
       "      <td>-1.759169</td>\n",
       "      <td>5</td>\n",
       "      <td>9.176371</td>\n",
       "      <td>2</td>\n",
       "      <td>DOMESTIC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lincoln</th>\n",
       "      <td>56.228591</td>\n",
       "      <td>-1.957809</td>\n",
       "      <td>6</td>\n",
       "      <td>4.055153</td>\n",
       "      <td>2</td>\n",
       "      <td>DOMESTIC</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Realization   Uniform  Poisson  Exponential  Binomial    Binary\n",
       "Sophia       23.177852 -7.931948        6     3.059147         4   FOREIGN\n",
       "Emma          6.208732  2.353540        8     0.592425         2  DOMESTIC\n",
       "Olivia       71.980159  7.658680        3     5.339675         4  DOMESTIC\n",
       "Ava          -0.440179  3.325740        3     7.605779         3   FOREIGN\n",
       "Mia          -5.703577 -3.860062        6    10.139036         3  DOMESTIC\n",
       "...                ...       ...      ...          ...       ...       ...\n",
       "Christian     2.879641  3.495297        7     2.750695         0  DOMESTIC\n",
       "Andrew       22.882727  9.833486        7     2.195155         1  DOMESTIC\n",
       "Brayden      23.577317 -9.007030        8     7.018624         1   FOREIGN\n",
       "John        -34.721386 -1.759169        5     9.176371         2  DOMESTIC\n",
       "Lincoln      56.228591 -1.957809        6     4.055153         2  DOMESTIC\n",
       "\n",
       "[100 rows x 6 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "df = pd.DataFrame({'Realization' : pd.Series(col1, index =fake_first_names ),\n",
    "                  'Uniform' : pd.Series(col2, index = fake_first_names ),\n",
    "                  'Poisson' : pd.Series(col3, index = fake_first_names ),\n",
    "                  'Exponential':pd.Series(col4, index = fake_first_names ),\n",
    "                  'Binomial': pd.Series(col5, index = fake_first_names ),\n",
    "                  'Binary': pd.Series(col6, index = fake_first_names )})\n",
    "\n",
    "df['Binary'] = df['Binary'].replace(0,'DOMESTIC')\n",
    "df['Binary'] = df['Binary'].replace(1,'FOREIGN')\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "30. Print out a table of the binary variable. Then print out the proportions of \"DOMESTIC\" vs \"FOREIGN\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DOMESTIC    81\n",
       "FOREIGN     19\n",
       "Name: Binary, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "df['Binary'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "31. Print out a summary of the whole dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 100 entries, Sophia to Lincoln\n",
      "Data columns (total 6 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   Realization  100 non-null    float64\n",
      " 1   Uniform      100 non-null    float64\n",
      " 2   Poisson      100 non-null    int64  \n",
      " 3   Exponential  100 non-null    float64\n",
      " 4   Binomial     100 non-null    int64  \n",
      " 5   Binary       100 non-null    object \n",
      "dtypes: float64(3), int64(2), object(1)\n",
      "memory usage: 5.5+ KB\n"
     ]
    }
   ],
   "source": [
    "# TO-DO\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "32. Output summary statistics of the DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Realization</th>\n",
       "      <th>Uniform</th>\n",
       "      <th>Poisson</th>\n",
       "      <th>Exponential</th>\n",
       "      <th>Binomial</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>12.706137</td>\n",
       "      <td>-0.065104</td>\n",
       "      <td>6.200000</td>\n",
       "      <td>7.502188</td>\n",
       "      <td>2.340000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>38.684983</td>\n",
       "      <td>5.701646</td>\n",
       "      <td>2.502524</td>\n",
       "      <td>7.625608</td>\n",
       "      <td>1.478602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-95.003856</td>\n",
       "      <td>-9.767369</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.059747</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-15.214030</td>\n",
       "      <td>-4.937219</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.709198</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>13.861675</td>\n",
       "      <td>-0.124324</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.295303</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>42.166759</td>\n",
       "      <td>4.205783</td>\n",
       "      <td>7.250000</td>\n",
       "      <td>10.181203</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>95.723963</td>\n",
       "      <td>9.880126</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>42.810610</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Realization     Uniform     Poisson  Exponential    Binomial\n",
       "count   100.000000  100.000000  100.000000   100.000000  100.000000\n",
       "mean     12.706137   -0.065104    6.200000     7.502188    2.340000\n",
       "std      38.684983    5.701646    2.502524     7.625608    1.478602\n",
       "min     -95.003856   -9.767369    0.000000     0.059747    0.000000\n",
       "25%     -15.214030   -4.937219    4.000000     2.709198    1.000000\n",
       "50%      13.861675   -0.124324    6.000000     5.295303    2.000000\n",
       "75%      42.166759    4.205783    7.250000    10.181203    3.000000\n",
       "max      95.723963    9.880126   13.000000    42.810610    6.000000"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# To-DO\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "33. Let `n = 50`. Create a n x n matrix `A` of exactly 50% entries 0's, 25% 1's 25% 2's. These values should be in random locations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2., 0., 2., ..., 2., 0., 0.],\n",
       "       [1., 1., 0., ..., 2., 2., 0.],\n",
       "       [0., 1., 0., ..., 2., 2., 1.],\n",
       "       ...,\n",
       "       [2., 2., 2., ..., 0., 2., 2.],\n",
       "       [0., 1., 0., ..., 0., 0., 1.],\n",
       "       [0., 1., 0., ..., 1., 0., 2.]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "p1 = 0.5\n",
    "p2 = 0.25\n",
    "p3 = 0.25\n",
    "z = np.random.choice([0, 1, 2], size=(50, 50), p=[p1, p2, p3])\n",
    "z = z*1.0\n",
    "z"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "34. Randomly punch holes (i.e. `NAN`) values in this matrix so that an each entry is missing with probability 30%. Hint: NumPy has a `np.nan` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2.,  0.,  2., ...,  2.,  0.,  0.],\n",
       "       [ 1.,  1.,  0., ...,  2.,  2.,  0.],\n",
       "       [ 0.,  1.,  0., ...,  2.,  2.,  1.],\n",
       "       ...,\n",
       "       [ 2.,  2.,  2., ..., nan,  2.,  2.],\n",
       "       [ 0.,  1.,  0., ...,  0.,  0.,  1.],\n",
       "       [ 0.,  1.,  0., ...,  1.,  0.,  2.]])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "n = 30\n",
    "index = np.random.choice(z.size,n,replace=False)\n",
    "z.ravel()[index] = np.nan\n",
    "z"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "35. Sort the rows in matrix `A` by the largest row sum to lowest. Be careful about the NAN's!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.,  2., nan, ...,  0.,  2.,  2.],\n",
       "       [ 0.,  1.,  0., ...,  2.,  1.,  0.],\n",
       "       [ 1.,  2., nan, ...,  0.,  0.,  1.],\n",
       "       ...,\n",
       "       [ 2.,  2.,  2., ...,  1.,  2.,  0.],\n",
       "       [ 1.,  0.,  2., ...,  0.,  0.,  0.],\n",
       "       [ 2.,  2.,  0., ...,  0.,  0.,  1.]])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "z[:,np.argsort(z.sum(axis=0))[::-1]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "36. Set a seed and then create a list `v` consisting of a sample of 1,000 iid normal realizations with mean -10 and variance 100."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TO-DO\n",
    "rn.seed(10)\n",
    "v = np.random.normal(-10,100,1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "37. Repeat (36) with a new seed. Save this new result to `w`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TO-DO\n",
    "rn.seed(20)\n",
    "v = np.random.normal(-10,100,1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "38. Find the average of `v` and the standard error of `v`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean of v is: -10.53139221982094\n",
      "The standard error of v is: 3.1283053111367334\n"
     ]
    }
   ],
   "source": [
    "# TO-DO\n",
    "print(\"The mean of v is:\",np.mean(v))\n",
    "print(\"The standard error of v is:\",np.std(v,ddof=1)/np.sqrt(np.size(v)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "39. Find the 5%ile of `v` using the Numpy library, read documentation to figure out which function to use. Is the estimate about what is expected by theory?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-174.22064971927443"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO-DO\n",
    "np.percentile(v,5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "40. What is the percentile of `v` that corresponds to the value 0? What should it be theoretically? Is the estimate about what is expected by theory?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The percentile of v that corresponds with the value of 0 is: 54.7 %\n"
     ]
    }
   ],
   "source": [
    "# TO-DO\n",
    "print(\"The percentile of v that corresponds with the value of 0 is:\",percentileofscore(v, 0),\"%\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
